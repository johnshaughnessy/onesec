package com.example.onesec_app;

import java.util.ArrayList;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.SearchManager;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.NavUtils;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.SearchView;
import android.widget.SearchView.OnCloseListener;

import com.example.onesec.Kitchen;
import com.example.onesec.impl.cake.Cake;
import com.example.onesec.impl.database.KitchenContract;
import com.example.onesec.impl.http.TokenManager;
import com.example.onesec.impl.second.Second;
import com.example.onesec_app.adapters.CakesArrayAdapter;
import com.example.onesec_app.adapters.CakesCursorAdapter;

public class ViewCakesActivity extends Activity {
	private Cursor c; 
	private Context mContext;
	// TODO handle what happens before any cakes are made and db doesn't exist
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		this.setTitle("My Cakes");
		setContentView(R.layout.activity_view_cakes);
		// Show the Up button in the action bar.
		setupActionBar();
		mContext = this;
		
		showCakes();
	}
	
	@SuppressLint("NewApi")
	@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.view_cakes, menu);
        
        // Associate searchable configuration with the SearchView
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
        	Log.v("onCreateOptionsMenu", "searchable");
        	SearchManager searchManager = (SearchManager)getSystemService(Context.SEARCH_SERVICE);
        	SearchView searchView = (SearchView)menu.findItem(R.id.search).getActionView();
        	searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));
        	
        	searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
	            @Override
	            public boolean onQueryTextSubmit(String sprinkle) {
	                if (sprinkle.length() != 0) {
	                    Log.v("onQueryTextSubmit", "sprinkle is " + sprinkle);
	                    showCakes(sprinkle);
	                    return true;
	                }
	                else {		// TODO don't think it ever gets here
	                	showCakes();
	                }
	                return false;
	            }
	
	            @Override
	            public boolean onQueryTextChange(String newText) {
	            	return false;
	            }
	        });
        	searchView.setOnCloseListener(new OnCloseListener() {
                @Override
                public boolean onClose() {		// TODO this doesn't do anything
                	Log.v("onClose", "showing cakes again");
                	showCakes();
                    return false;
                }
            });
        }
        
        return true;
    }
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			NavUtils.navigateUpFromSameTask(this);
			return true;
		case R.id.action_settings:
			// show settings
			break;
		case R.id.action_signout:
			signout();
			break;
		default:
			return super.onOptionsItemSelected(item);
		}
		return true;
	}
	
	private void showCakes() {
		c = Kitchen.getCakesCursor(this);
		
		String[] fromColumns = {
				KitchenContract.CakeEntry.COLUMN_NAME_TITLE,
				KitchenContract.CakeEntry.COLUMN_NAME_DATE,
				KitchenContract.CakeEntry.COLUMN_NAME_THUMBNAIL_PATH };
		int[] toViews = {
				R.id.cakeTitle,
				R.id.cakeDate,
				R.id.cakeThumbnail };
		
		c.moveToFirst();
		CakesCursorAdapter adapter = new CakesCursorAdapter(this, 
		        R.layout.listview_cakes_row, c, fromColumns, toViews, 0);
		ListView listView = (ListView)findViewById(R.id.cakesListView);
		listView.setAdapter(adapter);
		
		// Play video on click
		listView.setOnItemClickListener(new OnItemClickListener() {
			public void onItemClick(AdapterView<?> adapterView, View view, int pos, long id) {
				c.moveToPosition(pos);
				Cake cake = new Cake(c);

				Intent intent = new Intent();
				intent.setAction(Intent.ACTION_VIEW);
				intent.setDataAndType(cake.getVideoUri(), "video/mp4");
				startActivity(intent);
			}
		});
		
	}
	
	private void showCakes(String sprinkle) {
		// Get ArrayList of uids and convert it to an array of strings
		ArrayList<String> uidList = Kitchen.getUidsBySprinkle(this, sprinkle);
		String[] uidArray = new String[uidList.size()];
		uidArray = uidList.toArray(uidArray);
		final String[] finalUidArray = uidArray;		// don't look at this too closely...
		
		CakesArrayAdapter adapter = new CakesArrayAdapter(this,
				R.layout.listview_cakes_row, uidArray);
		ListView listView = (ListView)findViewById(R.id.cakesListView);
		listView.setAdapter(adapter);
		
		listView.setOnItemClickListener(new OnItemClickListener() {
			public void onItemClick(AdapterView<?> adapterView, View view, int pos, long id) {
				Cake cake = Kitchen.getCakeByUid(mContext, finalUidArray[pos]);
				// Play video
				Intent intent = new Intent();
				intent.setAction(Intent.ACTION_VIEW);
				intent.setDataAndType(cake.getVideoUri(), "video/mp4");
				startActivity(intent);
			}
		});
	}

	
	/**
	 * Set up the {@link android.app.ActionBar}, if the API is available.
	 */
	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
	private void setupActionBar() {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			getActionBar().setDisplayHomeAsUpEnabled(true);
		}
	}
	
    private void signout() {
    	TokenManager.forgetToken(this);
    	Log.v("signout", "forgetting token");
    }

}
